<?php

/**
 * This is the model class for table "adm_users".
 *
 * The followings are the available columns in table 'adm_users':
 * @property integer $id
 * @property string  $login
 * @property string  $name
 * @property integer $blocked
 * @property string  $password
 * @property string  $salt
 */
class AdmUsers extends AdminModel
{
	protected static $table_conf = array(
		'name'      => 'adm_users',
		'columns'   => array(
			'id'       => array(
				'string_type' => 'pk',
				'check'       => array(
					'allowNull'     => false,
					'type'          => 'integer',
					'autoIncrement' => true,
					'isPrimaryKey'  => true,
					'defaultValue'  => null,
				)
			),
			'login'    => array(
				'string_type' => 'string NOT NULL',
				'check'       => array(
					'allowNull'     => false,
					'type'          => 'string',
					'autoIncrement' => false,
					'isPrimaryKey'  => false,
					'defaultValue'  => null,
				)
			),
			'password' => array(
				'string_type' => 'varchar(32) NOT NULL',
				'check'       => array(
					'allowNull'     => false,
					'type'          => 'string',
					'autoIncrement' => false,
					'isPrimaryKey'  => false,
					'defaultValue'  => null,
				)
			),
			'salt'     => array(
				'string_type' => 'varchar(32) NOT NULL',
				'check'       => array(
					'allowNull'     => false,
					'type'          => 'string',
					'autoIncrement' => false,
					'isPrimaryKey'  => false,
					'defaultValue'  => null,
				)
			),
			'name'     => array(
				'string_type' => 'string',
				'check'       => array(
					'allowNull'     => true,
					'type'          => 'string',
					'autoIncrement' => false,
					'isPrimaryKey'  => false,
					'defaultValue'  => null,
				)
			),
			'blocked'  => array(
				'string_type' => 'int2',
				'check'       => array(
					'allowNull'     => true,
					'type'          => 'integer',
					'autoIncrement' => false,
					'isPrimaryKey'  => false,
					'defaultValue'  => null,
				)
			),
		),
		'base_data' => array(
			array('id' => 1, 'login' => 'admin', 'password' => '1', 'name' => 'Админ', 'blocked' => 0)
		)
	);

	public function __construct($scenario = 'insert')
	{
		self::init_db_table(self::getDbConnection(), __CLASS__, self::$table_conf);
		return parent::__construct($scenario); // TODO: Change the autogenerated stub
	}

	/**
	 * Генерирует хэш по значению и соли
	 *
	 * @param $val
	 * @param $salt
	 *
	 * @return string
	 */
	public static function createHash($val, $salt)
	{
		return md5($val.md5(md5(Yii::app()->controller->module->globalsalt.$val).md5($salt.$val)));
	}

	/**
	 * @inheritdoc
	 */
	protected function beforeValidate()
	{
		// При создании генерируется соль для пользователя
		if (in_array($this->getScenario(), array('create'))) {
			$this->salt = sprintf('%08x%08x%08x%08x', mt_rand(), mt_rand(), mt_rand(), mt_rand());
		}
		return parent::beforeValidate();
	}

	/**
	 * @inheritdoc
	 */
	protected function beforeSave()
	{
		// При создании генерируется соль для пользователя
		if (in_array($this->getScenario(), array('create'))) {
			$this->password = $this->createHash($this->password, $this->salt);
		}
		return parent::beforeSave();
	}


	/**
	 * @inheritdoc
	 */
	public static function model($className = __CLASS__)
	{
		return parent::model($className);
	}

	/**
	 * @inheritdoc
	 */
	public function tableName()
	{
		return 'adm_users';
	}

	/**
	 * @inheritdoc
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('login, name, blocked, password, salt', 'required'),
			array('blocked', 'numerical', 'integerOnly' => true),
			array('password, salt', 'length', 'max' => 32),
			// The following rule is used by search().
			// Please remove those attributes that should not be searched.
			array('id, login, name, blocked, password, salt', 'safe', 'on' => 'search'),
		);
	}

	/**
	 * @inheritdoc
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array();
	}

	/**
	 * @inheritdoc
	 */
	public function attributeLabels()
	{
		return array(
			'id'       => 'ID',
			'login'    => 'Login',
			'name'     => 'Name',
			'blocked'  => 'Blocked',
			'password' => 'Password',
			'salt'     => 'Salt',
		);
	}

	/**
	 * @inheritdoc
	 */
	public function search()
	{
		// Warning: Please modify the following code to remove attributes that
		// should not be searched.

		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('login', $this->login, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('blocked', $this->blocked);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('salt', $this->salt, true);

		return new CActiveDataProvider($this, array(
		                                           'criteria' => $criteria,
		                                      ));
	}
}